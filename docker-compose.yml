version: '3.8'

services:
  # Strapi Application
  strapi:
    build:
      context: .
      dockerfile: docker/Dockerfile.strapi
    container_name: ai-api-strapi
    restart: unless-stopped
    env_file: .env
    ports:
      - "1337:1337"
    volumes:
      - strapi_uploads:/opt/app/public/uploads
      - strapi_data:/opt/app/.tmp
      - ./strapi-backend:/opt/app
    depends_on:
      - postgres
      - redis
      - ollama
    networks:
      - ai_api_network
    environment:
      - DATABASE_CLIENT=postgres
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=strapi_db
      - DATABASE_USERNAME=strapi_user
      - DATABASE_PASSWORD=strapi_password
      - OLLAMA_BASE_URL=http://ollama:11434
      - N8N_WEBHOOK_URL=http://n8n:5678/webhook/api-analysis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:1337/_health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ai-api-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: strapi_db
      POSTGRES_USER: strapi_user
      POSTGRES_PASSWORD: strapi_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - ai_api_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U strapi_user -d strapi_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Caching
  redis:
    image: redis:7-alpine
    container_name: ai-api-redis
    restart: unless-stopped
    command: redis-server --requirepass redis_password
    volumes:
      - redis_data:/data
    networks:
      - ai_api_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Ollama for Local AI
  ollama:
    image: ollama/ollama:latest
    container_name: ai-api-ollama
    restart: unless-stopped
    volumes:
      - ollama_data:/root/.ollama
    ports:
      - "11434:11434"
    networks:
      - ai_api_network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    environment:
      - OLLAMA_HOST=0.0.0.0

  # N8n Workflow Automation
  n8n:
    image: n8nio/n8n:latest
    container_name: ai-api-n8n
    restart: unless-stopped
    ports:
      - "5678:5678"
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=admin123
      - N8N_HOST=0.0.0.0
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - NODE_ENV=production
      - WEBHOOK_URL=http://localhost:5678/
      - GENERIC_TIMEZONE=UTC
    volumes:
      - n8n_data:/home/node/.n8n
      - ./n8n-workflows:/home/node/.n8n/workflows
    networks:
      - ai_api_network
    depends_on:
      - postgres

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: ai-api-nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - strapi
    networks:
      - ai_api_network
    profiles:
      - production

  # Monitoring Stack (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-api-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - ai_api_network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: ai-api-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - ai_api_network
    profiles:
      - monitoring

volumes:
  postgres_data:
  strapi_uploads:
  strapi_data:
  redis_data:
  ollama_data:
  n8n_data:
  prometheus_data:
  grafana_data:

networks:
  ai_api_network:
    driver: bridge